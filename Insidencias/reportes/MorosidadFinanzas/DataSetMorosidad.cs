//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.6018
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace MorosidadFinanzas {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSetMorosidad : DataSet {
        
        private T_MorosidadDataTable tableT_Morosidad;
        
        public DataSetMorosidad() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSetMorosidad(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["T_Morosidad"] != null)) {
                    this.Tables.Add(new T_MorosidadDataTable(ds.Tables["T_Morosidad"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public T_MorosidadDataTable T_Morosidad {
            get {
                return this.tableT_Morosidad;
            }
        }
        
        public override DataSet Clone() {
            DataSetMorosidad cln = ((DataSetMorosidad)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["T_Morosidad"] != null)) {
                this.Tables.Add(new T_MorosidadDataTable(ds.Tables["T_Morosidad"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableT_Morosidad = ((T_MorosidadDataTable)(this.Tables["T_Morosidad"]));
            if ((this.tableT_Morosidad != null)) {
                this.tableT_Morosidad.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSetMorosidad";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSetMorosidad.xsd";
            this.Locale = new System.Globalization.CultureInfo("es-CL");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableT_Morosidad = new T_MorosidadDataTable();
            this.Tables.Add(this.tableT_Morosidad);
        }
        
        private bool ShouldSerializeT_Morosidad() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void T_MorosidadRowChangeEventHandler(object sender, T_MorosidadRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class T_MorosidadDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFECHA_CORTE;
            
            private DataColumn columnSEDE_TDESC;
            
            private DataColumn columnCARRERA;
            
            private DataColumn columnRUT;
            
            private DataColumn columnNOMBRE;
            
            private DataColumn columnCOMPROMETIDO;
            
            private DataColumn columnLETRAS;
            
            private DataColumn columnCHEQUES;
            
            private DataColumn columnPAGARE;
            
            internal T_MorosidadDataTable() : 
                    base("T_Morosidad") {
                this.InitClass();
            }
            
            internal T_MorosidadDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FECHA_CORTEColumn {
                get {
                    return this.columnFECHA_CORTE;
                }
            }
            
            internal DataColumn SEDE_TDESCColumn {
                get {
                    return this.columnSEDE_TDESC;
                }
            }
            
            internal DataColumn CARRERAColumn {
                get {
                    return this.columnCARRERA;
                }
            }
            
            internal DataColumn RUTColumn {
                get {
                    return this.columnRUT;
                }
            }
            
            internal DataColumn NOMBREColumn {
                get {
                    return this.columnNOMBRE;
                }
            }
            
            internal DataColumn COMPROMETIDOColumn {
                get {
                    return this.columnCOMPROMETIDO;
                }
            }
            
            internal DataColumn LETRASColumn {
                get {
                    return this.columnLETRAS;
                }
            }
            
            internal DataColumn CHEQUESColumn {
                get {
                    return this.columnCHEQUES;
                }
            }
            
            internal DataColumn PAGAREColumn {
                get {
                    return this.columnPAGARE;
                }
            }
            
            public T_MorosidadRow this[int index] {
                get {
                    return ((T_MorosidadRow)(this.Rows[index]));
                }
            }
            
            public event T_MorosidadRowChangeEventHandler T_MorosidadRowChanged;
            
            public event T_MorosidadRowChangeEventHandler T_MorosidadRowChanging;
            
            public event T_MorosidadRowChangeEventHandler T_MorosidadRowDeleted;
            
            public event T_MorosidadRowChangeEventHandler T_MorosidadRowDeleting;
            
            public void AddT_MorosidadRow(T_MorosidadRow row) {
                this.Rows.Add(row);
            }
            
            public T_MorosidadRow AddT_MorosidadRow(string FECHA_CORTE, string SEDE_TDESC, string CARRERA, string RUT, string NOMBRE, string COMPROMETIDO, string LETRAS, string CHEQUES, string PAGARE) {
                T_MorosidadRow rowT_MorosidadRow = ((T_MorosidadRow)(this.NewRow()));
                rowT_MorosidadRow.ItemArray = new object[] {
                        FECHA_CORTE,
                        SEDE_TDESC,
                        CARRERA,
                        RUT,
                        NOMBRE,
                        COMPROMETIDO,
                        LETRAS,
                        CHEQUES,
                        PAGARE};
                this.Rows.Add(rowT_MorosidadRow);
                return rowT_MorosidadRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                T_MorosidadDataTable cln = ((T_MorosidadDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new T_MorosidadDataTable();
            }
            
            internal void InitVars() {
                this.columnFECHA_CORTE = this.Columns["FECHA_CORTE"];
                this.columnSEDE_TDESC = this.Columns["SEDE_TDESC"];
                this.columnCARRERA = this.Columns["CARRERA"];
                this.columnRUT = this.Columns["RUT"];
                this.columnNOMBRE = this.Columns["NOMBRE"];
                this.columnCOMPROMETIDO = this.Columns["COMPROMETIDO"];
                this.columnLETRAS = this.Columns["LETRAS"];
                this.columnCHEQUES = this.Columns["CHEQUES"];
                this.columnPAGARE = this.Columns["PAGARE"];
            }
            
            private void InitClass() {
                this.columnFECHA_CORTE = new DataColumn("FECHA_CORTE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFECHA_CORTE);
                this.columnSEDE_TDESC = new DataColumn("SEDE_TDESC", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSEDE_TDESC);
                this.columnCARRERA = new DataColumn("CARRERA", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCARRERA);
                this.columnRUT = new DataColumn("RUT", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRUT);
                this.columnNOMBRE = new DataColumn("NOMBRE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNOMBRE);
                this.columnCOMPROMETIDO = new DataColumn("COMPROMETIDO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCOMPROMETIDO);
                this.columnLETRAS = new DataColumn("LETRAS", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLETRAS);
                this.columnCHEQUES = new DataColumn("CHEQUES", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCHEQUES);
                this.columnPAGARE = new DataColumn("PAGARE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPAGARE);
                this.columnFECHA_CORTE.ReadOnly = true;
                this.columnSEDE_TDESC.ReadOnly = true;
                this.columnCARRERA.ReadOnly = true;
                this.columnRUT.ReadOnly = true;
                this.columnNOMBRE.ReadOnly = true;
                this.columnCOMPROMETIDO.ReadOnly = true;
                this.columnLETRAS.ReadOnly = true;
                this.columnCHEQUES.ReadOnly = true;
                this.columnPAGARE.ReadOnly = true;
            }
            
            public T_MorosidadRow NewT_MorosidadRow() {
                return ((T_MorosidadRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new T_MorosidadRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(T_MorosidadRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.T_MorosidadRowChanged != null)) {
                    this.T_MorosidadRowChanged(this, new T_MorosidadRowChangeEvent(((T_MorosidadRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.T_MorosidadRowChanging != null)) {
                    this.T_MorosidadRowChanging(this, new T_MorosidadRowChangeEvent(((T_MorosidadRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.T_MorosidadRowDeleted != null)) {
                    this.T_MorosidadRowDeleted(this, new T_MorosidadRowChangeEvent(((T_MorosidadRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.T_MorosidadRowDeleting != null)) {
                    this.T_MorosidadRowDeleting(this, new T_MorosidadRowChangeEvent(((T_MorosidadRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveT_MorosidadRow(T_MorosidadRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class T_MorosidadRow : DataRow {
            
            private T_MorosidadDataTable tableT_Morosidad;
            
            internal T_MorosidadRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableT_Morosidad = ((T_MorosidadDataTable)(this.Table));
            }
            
            public string FECHA_CORTE {
                get {
                    try {
                        return ((string)(this[this.tableT_Morosidad.FECHA_CORTEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_Morosidad.FECHA_CORTEColumn] = value;
                }
            }
            
            public string SEDE_TDESC {
                get {
                    try {
                        return ((string)(this[this.tableT_Morosidad.SEDE_TDESCColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_Morosidad.SEDE_TDESCColumn] = value;
                }
            }
            
            public string CARRERA {
                get {
                    try {
                        return ((string)(this[this.tableT_Morosidad.CARRERAColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_Morosidad.CARRERAColumn] = value;
                }
            }
            
            public string RUT {
                get {
                    try {
                        return ((string)(this[this.tableT_Morosidad.RUTColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_Morosidad.RUTColumn] = value;
                }
            }
            
            public string NOMBRE {
                get {
                    try {
                        return ((string)(this[this.tableT_Morosidad.NOMBREColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_Morosidad.NOMBREColumn] = value;
                }
            }
            
            public string COMPROMETIDO {
                get {
                    try {
                        return ((string)(this[this.tableT_Morosidad.COMPROMETIDOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_Morosidad.COMPROMETIDOColumn] = value;
                }
            }
            
            public string LETRAS {
                get {
                    try {
                        return ((string)(this[this.tableT_Morosidad.LETRASColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_Morosidad.LETRASColumn] = value;
                }
            }
            
            public string CHEQUES {
                get {
                    try {
                        return ((string)(this[this.tableT_Morosidad.CHEQUESColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_Morosidad.CHEQUESColumn] = value;
                }
            }
            
            public string PAGARE {
                get {
                    try {
                        return ((string)(this[this.tableT_Morosidad.PAGAREColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableT_Morosidad.PAGAREColumn] = value;
                }
            }
            
            public bool IsFECHA_CORTENull() {
                return this.IsNull(this.tableT_Morosidad.FECHA_CORTEColumn);
            }
            
            public void SetFECHA_CORTENull() {
                this[this.tableT_Morosidad.FECHA_CORTEColumn] = System.Convert.DBNull;
            }
            
            public bool IsSEDE_TDESCNull() {
                return this.IsNull(this.tableT_Morosidad.SEDE_TDESCColumn);
            }
            
            public void SetSEDE_TDESCNull() {
                this[this.tableT_Morosidad.SEDE_TDESCColumn] = System.Convert.DBNull;
            }
            
            public bool IsCARRERANull() {
                return this.IsNull(this.tableT_Morosidad.CARRERAColumn);
            }
            
            public void SetCARRERANull() {
                this[this.tableT_Morosidad.CARRERAColumn] = System.Convert.DBNull;
            }
            
            public bool IsRUTNull() {
                return this.IsNull(this.tableT_Morosidad.RUTColumn);
            }
            
            public void SetRUTNull() {
                this[this.tableT_Morosidad.RUTColumn] = System.Convert.DBNull;
            }
            
            public bool IsNOMBRENull() {
                return this.IsNull(this.tableT_Morosidad.NOMBREColumn);
            }
            
            public void SetNOMBRENull() {
                this[this.tableT_Morosidad.NOMBREColumn] = System.Convert.DBNull;
            }
            
            public bool IsCOMPROMETIDONull() {
                return this.IsNull(this.tableT_Morosidad.COMPROMETIDOColumn);
            }
            
            public void SetCOMPROMETIDONull() {
                this[this.tableT_Morosidad.COMPROMETIDOColumn] = System.Convert.DBNull;
            }
            
            public bool IsLETRASNull() {
                return this.IsNull(this.tableT_Morosidad.LETRASColumn);
            }
            
            public void SetLETRASNull() {
                this[this.tableT_Morosidad.LETRASColumn] = System.Convert.DBNull;
            }
            
            public bool IsCHEQUESNull() {
                return this.IsNull(this.tableT_Morosidad.CHEQUESColumn);
            }
            
            public void SetCHEQUESNull() {
                this[this.tableT_Morosidad.CHEQUESColumn] = System.Convert.DBNull;
            }
            
            public bool IsPAGARENull() {
                return this.IsNull(this.tableT_Morosidad.PAGAREColumn);
            }
            
            public void SetPAGARENull() {
                this[this.tableT_Morosidad.PAGAREColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class T_MorosidadRowChangeEvent : EventArgs {
            
            private T_MorosidadRow eventRow;
            
            private DataRowAction eventAction;
            
            public T_MorosidadRowChangeEvent(T_MorosidadRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public T_MorosidadRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
