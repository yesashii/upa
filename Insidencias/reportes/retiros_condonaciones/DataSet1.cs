//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace retiros_condonaciones {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSet1 : DataSet {
        
        private DETALLESDataTable tableDETALLES;
        
        private ENCABEZADODataTable tableENCABEZADO;
        
        public DataSet1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSet1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DETALLES"] != null)) {
                    this.Tables.Add(new DETALLESDataTable(ds.Tables["DETALLES"]));
                }
                if ((ds.Tables["ENCABEZADO"] != null)) {
                    this.Tables.Add(new ENCABEZADODataTable(ds.Tables["ENCABEZADO"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DETALLESDataTable DETALLES {
            get {
                return this.tableDETALLES;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ENCABEZADODataTable ENCABEZADO {
            get {
                return this.tableENCABEZADO;
            }
        }
        
        public override DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["DETALLES"] != null)) {
                this.Tables.Add(new DETALLESDataTable(ds.Tables["DETALLES"]));
            }
            if ((ds.Tables["ENCABEZADO"] != null)) {
                this.Tables.Add(new ENCABEZADODataTable(ds.Tables["ENCABEZADO"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDETALLES = ((DETALLESDataTable)(this.Tables["DETALLES"]));
            if ((this.tableDETALLES != null)) {
                this.tableDETALLES.InitVars();
            }
            this.tableENCABEZADO = ((ENCABEZADODataTable)(this.Tables["ENCABEZADO"]));
            if ((this.tableENCABEZADO != null)) {
                this.tableENCABEZADO.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSet1.xsd";
            this.Locale = new System.Globalization.CultureInfo("es-CL");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableDETALLES = new DETALLESDataTable();
            this.Tables.Add(this.tableDETALLES);
            this.tableENCABEZADO = new ENCABEZADODataTable();
            this.Tables.Add(this.tableENCABEZADO);
        }
        
        private bool ShouldSerializeDETALLES() {
            return false;
        }
        
        private bool ShouldSerializeENCABEZADO() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DETALLESRowChangeEventHandler(object sender, DETALLESRowChangeEvent e);
        
        public delegate void ENCABEZADORowChangeEventHandler(object sender, ENCABEZADORowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DETALLESDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCARR_TDESC;
            
            private DataColumn columnTING_TDESC;
            
            private DataColumn columnTOTAL_01;
            
            private DataColumn columnTOTAL_02;
            
            private DataColumn columnTOTAL_03;
            
            private DataColumn columnTOTAL_04;
            
            private DataColumn columnTOTAL_05;
            
            private DataColumn columnTOTAL_06;
            
            private DataColumn columnTOTAL_07;
            
            private DataColumn columnTOTAL_08;
            
            private DataColumn columnTOTAL_09;
            
            private DataColumn columnTOTAL_10;
            
            private DataColumn columnTOTAL_11;
            
            private DataColumn columnTOTAL_12;
            
            private DataColumn columnORDEN;
            
            private DataColumn columnTOTAL;
            
            internal DETALLESDataTable() : 
                    base("DETALLES") {
                this.InitClass();
            }
            
            internal DETALLESDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CARR_TDESCColumn {
                get {
                    return this.columnCARR_TDESC;
                }
            }
            
            internal DataColumn TING_TDESCColumn {
                get {
                    return this.columnTING_TDESC;
                }
            }
            
            internal DataColumn TOTAL_01Column {
                get {
                    return this.columnTOTAL_01;
                }
            }
            
            internal DataColumn TOTAL_02Column {
                get {
                    return this.columnTOTAL_02;
                }
            }
            
            internal DataColumn TOTAL_03Column {
                get {
                    return this.columnTOTAL_03;
                }
            }
            
            internal DataColumn TOTAL_04Column {
                get {
                    return this.columnTOTAL_04;
                }
            }
            
            internal DataColumn TOTAL_05Column {
                get {
                    return this.columnTOTAL_05;
                }
            }
            
            internal DataColumn TOTAL_06Column {
                get {
                    return this.columnTOTAL_06;
                }
            }
            
            internal DataColumn TOTAL_07Column {
                get {
                    return this.columnTOTAL_07;
                }
            }
            
            internal DataColumn TOTAL_08Column {
                get {
                    return this.columnTOTAL_08;
                }
            }
            
            internal DataColumn TOTAL_09Column {
                get {
                    return this.columnTOTAL_09;
                }
            }
            
            internal DataColumn TOTAL_10Column {
                get {
                    return this.columnTOTAL_10;
                }
            }
            
            internal DataColumn TOTAL_11Column {
                get {
                    return this.columnTOTAL_11;
                }
            }
            
            internal DataColumn TOTAL_12Column {
                get {
                    return this.columnTOTAL_12;
                }
            }
            
            internal DataColumn ORDENColumn {
                get {
                    return this.columnORDEN;
                }
            }
            
            internal DataColumn TOTALColumn {
                get {
                    return this.columnTOTAL;
                }
            }
            
            public DETALLESRow this[int index] {
                get {
                    return ((DETALLESRow)(this.Rows[index]));
                }
            }
            
            public event DETALLESRowChangeEventHandler DETALLESRowChanged;
            
            public event DETALLESRowChangeEventHandler DETALLESRowChanging;
            
            public event DETALLESRowChangeEventHandler DETALLESRowDeleted;
            
            public event DETALLESRowChangeEventHandler DETALLESRowDeleting;
            
            public void AddDETALLESRow(DETALLESRow row) {
                this.Rows.Add(row);
            }
            
            public DETALLESRow AddDETALLESRow(
                        string CARR_TDESC, 
                        string TING_TDESC, 
                        System.Decimal TOTAL_01, 
                        System.Decimal TOTAL_02, 
                        System.Decimal TOTAL_03, 
                        System.Decimal TOTAL_04, 
                        System.Decimal TOTAL_05, 
                        System.Decimal TOTAL_06, 
                        System.Decimal TOTAL_07, 
                        System.Decimal TOTAL_08, 
                        System.Decimal TOTAL_09, 
                        System.Decimal TOTAL_10, 
                        System.Decimal TOTAL_11, 
                        System.Decimal TOTAL_12, 
                        string ORDEN, 
                        System.Decimal TOTAL) {
                DETALLESRow rowDETALLESRow = ((DETALLESRow)(this.NewRow()));
                rowDETALLESRow.ItemArray = new object[] {
                        CARR_TDESC,
                        TING_TDESC,
                        TOTAL_01,
                        TOTAL_02,
                        TOTAL_03,
                        TOTAL_04,
                        TOTAL_05,
                        TOTAL_06,
                        TOTAL_07,
                        TOTAL_08,
                        TOTAL_09,
                        TOTAL_10,
                        TOTAL_11,
                        TOTAL_12,
                        ORDEN,
                        TOTAL};
                this.Rows.Add(rowDETALLESRow);
                return rowDETALLESRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DETALLESDataTable cln = ((DETALLESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DETALLESDataTable();
            }
            
            internal void InitVars() {
                this.columnCARR_TDESC = this.Columns["CARR_TDESC"];
                this.columnTING_TDESC = this.Columns["TING_TDESC"];
                this.columnTOTAL_01 = this.Columns["TOTAL_01"];
                this.columnTOTAL_02 = this.Columns["TOTAL_02"];
                this.columnTOTAL_03 = this.Columns["TOTAL_03"];
                this.columnTOTAL_04 = this.Columns["TOTAL_04"];
                this.columnTOTAL_05 = this.Columns["TOTAL_05"];
                this.columnTOTAL_06 = this.Columns["TOTAL_06"];
                this.columnTOTAL_07 = this.Columns["TOTAL_07"];
                this.columnTOTAL_08 = this.Columns["TOTAL_08"];
                this.columnTOTAL_09 = this.Columns["TOTAL_09"];
                this.columnTOTAL_10 = this.Columns["TOTAL_10"];
                this.columnTOTAL_11 = this.Columns["TOTAL_11"];
                this.columnTOTAL_12 = this.Columns["TOTAL_12"];
                this.columnORDEN = this.Columns["ORDEN"];
                this.columnTOTAL = this.Columns["TOTAL"];
            }
            
            private void InitClass() {
                this.columnCARR_TDESC = new DataColumn("CARR_TDESC", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCARR_TDESC);
                this.columnTING_TDESC = new DataColumn("TING_TDESC", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTING_TDESC);
                this.columnTOTAL_01 = new DataColumn("TOTAL_01", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTOTAL_01);
                this.columnTOTAL_02 = new DataColumn("TOTAL_02", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTOTAL_02);
                this.columnTOTAL_03 = new DataColumn("TOTAL_03", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTOTAL_03);
                this.columnTOTAL_04 = new DataColumn("TOTAL_04", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTOTAL_04);
                this.columnTOTAL_05 = new DataColumn("TOTAL_05", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTOTAL_05);
                this.columnTOTAL_06 = new DataColumn("TOTAL_06", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTOTAL_06);
                this.columnTOTAL_07 = new DataColumn("TOTAL_07", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTOTAL_07);
                this.columnTOTAL_08 = new DataColumn("TOTAL_08", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTOTAL_08);
                this.columnTOTAL_09 = new DataColumn("TOTAL_09", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTOTAL_09);
                this.columnTOTAL_10 = new DataColumn("TOTAL_10", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTOTAL_10);
                this.columnTOTAL_11 = new DataColumn("TOTAL_11", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTOTAL_11);
                this.columnTOTAL_12 = new DataColumn("TOTAL_12", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTOTAL_12);
                this.columnORDEN = new DataColumn("ORDEN", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnORDEN);
                this.columnTOTAL = new DataColumn("TOTAL", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTOTAL);
                this.columnCARR_TDESC.ReadOnly = true;
                this.columnTING_TDESC.ReadOnly = true;
                this.columnTOTAL_01.ReadOnly = true;
                this.columnTOTAL_02.ReadOnly = true;
                this.columnTOTAL_03.ReadOnly = true;
                this.columnTOTAL_04.ReadOnly = true;
                this.columnTOTAL_05.ReadOnly = true;
                this.columnTOTAL_06.ReadOnly = true;
                this.columnTOTAL_07.ReadOnly = true;
                this.columnTOTAL_08.ReadOnly = true;
                this.columnTOTAL_09.ReadOnly = true;
                this.columnTOTAL_10.ReadOnly = true;
                this.columnTOTAL_11.ReadOnly = true;
                this.columnTOTAL_12.ReadOnly = true;
            }
            
            public DETALLESRow NewDETALLESRow() {
                return ((DETALLESRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DETALLESRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DETALLESRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DETALLESRowChanged != null)) {
                    this.DETALLESRowChanged(this, new DETALLESRowChangeEvent(((DETALLESRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DETALLESRowChanging != null)) {
                    this.DETALLESRowChanging(this, new DETALLESRowChangeEvent(((DETALLESRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DETALLESRowDeleted != null)) {
                    this.DETALLESRowDeleted(this, new DETALLESRowChangeEvent(((DETALLESRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DETALLESRowDeleting != null)) {
                    this.DETALLESRowDeleting(this, new DETALLESRowChangeEvent(((DETALLESRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDETALLESRow(DETALLESRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DETALLESRow : DataRow {
            
            private DETALLESDataTable tableDETALLES;
            
            internal DETALLESRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDETALLES = ((DETALLESDataTable)(this.Table));
            }
            
            public string CARR_TDESC {
                get {
                    try {
                        return ((string)(this[this.tableDETALLES.CARR_TDESCColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.CARR_TDESCColumn] = value;
                }
            }
            
            public string TING_TDESC {
                get {
                    try {
                        return ((string)(this[this.tableDETALLES.TING_TDESCColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.TING_TDESCColumn] = value;
                }
            }
            
            public System.Decimal TOTAL_01 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDETALLES.TOTAL_01Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.TOTAL_01Column] = value;
                }
            }
            
            public System.Decimal TOTAL_02 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDETALLES.TOTAL_02Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.TOTAL_02Column] = value;
                }
            }
            
            public System.Decimal TOTAL_03 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDETALLES.TOTAL_03Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.TOTAL_03Column] = value;
                }
            }
            
            public System.Decimal TOTAL_04 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDETALLES.TOTAL_04Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.TOTAL_04Column] = value;
                }
            }
            
            public System.Decimal TOTAL_05 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDETALLES.TOTAL_05Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.TOTAL_05Column] = value;
                }
            }
            
            public System.Decimal TOTAL_06 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDETALLES.TOTAL_06Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.TOTAL_06Column] = value;
                }
            }
            
            public System.Decimal TOTAL_07 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDETALLES.TOTAL_07Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.TOTAL_07Column] = value;
                }
            }
            
            public System.Decimal TOTAL_08 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDETALLES.TOTAL_08Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.TOTAL_08Column] = value;
                }
            }
            
            public System.Decimal TOTAL_09 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDETALLES.TOTAL_09Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.TOTAL_09Column] = value;
                }
            }
            
            public System.Decimal TOTAL_10 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDETALLES.TOTAL_10Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.TOTAL_10Column] = value;
                }
            }
            
            public System.Decimal TOTAL_11 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDETALLES.TOTAL_11Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.TOTAL_11Column] = value;
                }
            }
            
            public System.Decimal TOTAL_12 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDETALLES.TOTAL_12Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.TOTAL_12Column] = value;
                }
            }
            
            public string ORDEN {
                get {
                    try {
                        return ((string)(this[this.tableDETALLES.ORDENColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.ORDENColumn] = value;
                }
            }
            
            public System.Decimal TOTAL {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDETALLES.TOTALColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.TOTALColumn] = value;
                }
            }
            
            public bool IsCARR_TDESCNull() {
                return this.IsNull(this.tableDETALLES.CARR_TDESCColumn);
            }
            
            public void SetCARR_TDESCNull() {
                this[this.tableDETALLES.CARR_TDESCColumn] = System.Convert.DBNull;
            }
            
            public bool IsTING_TDESCNull() {
                return this.IsNull(this.tableDETALLES.TING_TDESCColumn);
            }
            
            public void SetTING_TDESCNull() {
                this[this.tableDETALLES.TING_TDESCColumn] = System.Convert.DBNull;
            }
            
            public bool IsTOTAL_01Null() {
                return this.IsNull(this.tableDETALLES.TOTAL_01Column);
            }
            
            public void SetTOTAL_01Null() {
                this[this.tableDETALLES.TOTAL_01Column] = System.Convert.DBNull;
            }
            
            public bool IsTOTAL_02Null() {
                return this.IsNull(this.tableDETALLES.TOTAL_02Column);
            }
            
            public void SetTOTAL_02Null() {
                this[this.tableDETALLES.TOTAL_02Column] = System.Convert.DBNull;
            }
            
            public bool IsTOTAL_03Null() {
                return this.IsNull(this.tableDETALLES.TOTAL_03Column);
            }
            
            public void SetTOTAL_03Null() {
                this[this.tableDETALLES.TOTAL_03Column] = System.Convert.DBNull;
            }
            
            public bool IsTOTAL_04Null() {
                return this.IsNull(this.tableDETALLES.TOTAL_04Column);
            }
            
            public void SetTOTAL_04Null() {
                this[this.tableDETALLES.TOTAL_04Column] = System.Convert.DBNull;
            }
            
            public bool IsTOTAL_05Null() {
                return this.IsNull(this.tableDETALLES.TOTAL_05Column);
            }
            
            public void SetTOTAL_05Null() {
                this[this.tableDETALLES.TOTAL_05Column] = System.Convert.DBNull;
            }
            
            public bool IsTOTAL_06Null() {
                return this.IsNull(this.tableDETALLES.TOTAL_06Column);
            }
            
            public void SetTOTAL_06Null() {
                this[this.tableDETALLES.TOTAL_06Column] = System.Convert.DBNull;
            }
            
            public bool IsTOTAL_07Null() {
                return this.IsNull(this.tableDETALLES.TOTAL_07Column);
            }
            
            public void SetTOTAL_07Null() {
                this[this.tableDETALLES.TOTAL_07Column] = System.Convert.DBNull;
            }
            
            public bool IsTOTAL_08Null() {
                return this.IsNull(this.tableDETALLES.TOTAL_08Column);
            }
            
            public void SetTOTAL_08Null() {
                this[this.tableDETALLES.TOTAL_08Column] = System.Convert.DBNull;
            }
            
            public bool IsTOTAL_09Null() {
                return this.IsNull(this.tableDETALLES.TOTAL_09Column);
            }
            
            public void SetTOTAL_09Null() {
                this[this.tableDETALLES.TOTAL_09Column] = System.Convert.DBNull;
            }
            
            public bool IsTOTAL_10Null() {
                return this.IsNull(this.tableDETALLES.TOTAL_10Column);
            }
            
            public void SetTOTAL_10Null() {
                this[this.tableDETALLES.TOTAL_10Column] = System.Convert.DBNull;
            }
            
            public bool IsTOTAL_11Null() {
                return this.IsNull(this.tableDETALLES.TOTAL_11Column);
            }
            
            public void SetTOTAL_11Null() {
                this[this.tableDETALLES.TOTAL_11Column] = System.Convert.DBNull;
            }
            
            public bool IsTOTAL_12Null() {
                return this.IsNull(this.tableDETALLES.TOTAL_12Column);
            }
            
            public void SetTOTAL_12Null() {
                this[this.tableDETALLES.TOTAL_12Column] = System.Convert.DBNull;
            }
            
            public bool IsORDENNull() {
                return this.IsNull(this.tableDETALLES.ORDENColumn);
            }
            
            public void SetORDENNull() {
                this[this.tableDETALLES.ORDENColumn] = System.Convert.DBNull;
            }
            
            public bool IsTOTALNull() {
                return this.IsNull(this.tableDETALLES.TOTALColumn);
            }
            
            public void SetTOTALNull() {
                this[this.tableDETALLES.TOTALColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DETALLESRowChangeEvent : EventArgs {
            
            private DETALLESRow eventRow;
            
            private DataRowAction eventAction;
            
            public DETALLESRowChangeEvent(DETALLESRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DETALLESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ENCABEZADODataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnANOS_CCOD;
            
            private DataColumn columnSEDE_TDESC;
            
            internal ENCABEZADODataTable() : 
                    base("ENCABEZADO") {
                this.InitClass();
            }
            
            internal ENCABEZADODataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ANOS_CCODColumn {
                get {
                    return this.columnANOS_CCOD;
                }
            }
            
            internal DataColumn SEDE_TDESCColumn {
                get {
                    return this.columnSEDE_TDESC;
                }
            }
            
            public ENCABEZADORow this[int index] {
                get {
                    return ((ENCABEZADORow)(this.Rows[index]));
                }
            }
            
            public event ENCABEZADORowChangeEventHandler ENCABEZADORowChanged;
            
            public event ENCABEZADORowChangeEventHandler ENCABEZADORowChanging;
            
            public event ENCABEZADORowChangeEventHandler ENCABEZADORowDeleted;
            
            public event ENCABEZADORowChangeEventHandler ENCABEZADORowDeleting;
            
            public void AddENCABEZADORow(ENCABEZADORow row) {
                this.Rows.Add(row);
            }
            
            public ENCABEZADORow AddENCABEZADORow(System.Decimal ANOS_CCOD, string SEDE_TDESC) {
                ENCABEZADORow rowENCABEZADORow = ((ENCABEZADORow)(this.NewRow()));
                rowENCABEZADORow.ItemArray = new object[] {
                        ANOS_CCOD,
                        SEDE_TDESC};
                this.Rows.Add(rowENCABEZADORow);
                return rowENCABEZADORow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ENCABEZADODataTable cln = ((ENCABEZADODataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ENCABEZADODataTable();
            }
            
            internal void InitVars() {
                this.columnANOS_CCOD = this.Columns["ANOS_CCOD"];
                this.columnSEDE_TDESC = this.Columns["SEDE_TDESC"];
            }
            
            private void InitClass() {
                this.columnANOS_CCOD = new DataColumn("ANOS_CCOD", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnANOS_CCOD);
                this.columnSEDE_TDESC = new DataColumn("SEDE_TDESC", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSEDE_TDESC);
                this.columnANOS_CCOD.ReadOnly = true;
                this.columnSEDE_TDESC.ReadOnly = true;
            }
            
            public ENCABEZADORow NewENCABEZADORow() {
                return ((ENCABEZADORow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ENCABEZADORow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ENCABEZADORow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ENCABEZADORowChanged != null)) {
                    this.ENCABEZADORowChanged(this, new ENCABEZADORowChangeEvent(((ENCABEZADORow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ENCABEZADORowChanging != null)) {
                    this.ENCABEZADORowChanging(this, new ENCABEZADORowChangeEvent(((ENCABEZADORow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ENCABEZADORowDeleted != null)) {
                    this.ENCABEZADORowDeleted(this, new ENCABEZADORowChangeEvent(((ENCABEZADORow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ENCABEZADORowDeleting != null)) {
                    this.ENCABEZADORowDeleting(this, new ENCABEZADORowChangeEvent(((ENCABEZADORow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveENCABEZADORow(ENCABEZADORow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ENCABEZADORow : DataRow {
            
            private ENCABEZADODataTable tableENCABEZADO;
            
            internal ENCABEZADORow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableENCABEZADO = ((ENCABEZADODataTable)(this.Table));
            }
            
            public System.Decimal ANOS_CCOD {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableENCABEZADO.ANOS_CCODColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableENCABEZADO.ANOS_CCODColumn] = value;
                }
            }
            
            public string SEDE_TDESC {
                get {
                    try {
                        return ((string)(this[this.tableENCABEZADO.SEDE_TDESCColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableENCABEZADO.SEDE_TDESCColumn] = value;
                }
            }
            
            public bool IsANOS_CCODNull() {
                return this.IsNull(this.tableENCABEZADO.ANOS_CCODColumn);
            }
            
            public void SetANOS_CCODNull() {
                this[this.tableENCABEZADO.ANOS_CCODColumn] = System.Convert.DBNull;
            }
            
            public bool IsSEDE_TDESCNull() {
                return this.IsNull(this.tableENCABEZADO.SEDE_TDESCColumn);
            }
            
            public void SetSEDE_TDESCNull() {
                this[this.tableENCABEZADO.SEDE_TDESCColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ENCABEZADORowChangeEvent : EventArgs {
            
            private ENCABEZADORow eventRow;
            
            private DataRowAction eventAction;
            
            public ENCABEZADORowChangeEvent(ENCABEZADORow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ENCABEZADORow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
