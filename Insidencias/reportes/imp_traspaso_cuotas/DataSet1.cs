//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace imp_traspaso_cuotas {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSet1 : DataSet {
        
        private DETALLEDataTable tableDETALLE;
        
        private ENCABEZADODataTable tableENCABEZADO;
        
        public DataSet1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSet1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DETALLE"] != null)) {
                    this.Tables.Add(new DETALLEDataTable(ds.Tables["DETALLE"]));
                }
                if ((ds.Tables["ENCABEZADO"] != null)) {
                    this.Tables.Add(new ENCABEZADODataTable(ds.Tables["ENCABEZADO"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DETALLEDataTable DETALLE {
            get {
                return this.tableDETALLE;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ENCABEZADODataTable ENCABEZADO {
            get {
                return this.tableENCABEZADO;
            }
        }
        
        public override DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["DETALLE"] != null)) {
                this.Tables.Add(new DETALLEDataTable(ds.Tables["DETALLE"]));
            }
            if ((ds.Tables["ENCABEZADO"] != null)) {
                this.Tables.Add(new ENCABEZADODataTable(ds.Tables["ENCABEZADO"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDETALLE = ((DETALLEDataTable)(this.Tables["DETALLE"]));
            if ((this.tableDETALLE != null)) {
                this.tableDETALLE.InitVars();
            }
            this.tableENCABEZADO = ((ENCABEZADODataTable)(this.Tables["ENCABEZADO"]));
            if ((this.tableENCABEZADO != null)) {
                this.tableENCABEZADO.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSet1.xsd";
            this.Locale = new System.Globalization.CultureInfo("es-CL");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableDETALLE = new DETALLEDataTable();
            this.Tables.Add(this.tableDETALLE);
            this.tableENCABEZADO = new ENCABEZADODataTable();
            this.Tables.Add(this.tableENCABEZADO);
        }
        
        private bool ShouldSerializeDETALLE() {
            return false;
        }
        
        private bool ShouldSerializeENCABEZADO() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DETALLERowChangeEventHandler(object sender, DETALLERowChangeEvent e);
        
        public delegate void ENCABEZADORowChangeEventHandler(object sender, ENCABEZADORowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DETALLEDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTING_TDESC;
            
            private DataColumn columnDING_NDOCTO;
            
            private DataColumn columnDING_FDOCTO;
            
            private DataColumn columnDING_MDOCTO;
            
            private DataColumn columnINGR_NCORR;
            
            private DataColumn columnTING_CCOD;
            
            private DataColumn columnEXPR1;
            
            internal DETALLEDataTable() : 
                    base("DETALLE") {
                this.InitClass();
            }
            
            internal DETALLEDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TING_TDESCColumn {
                get {
                    return this.columnTING_TDESC;
                }
            }
            
            internal DataColumn DING_NDOCTOColumn {
                get {
                    return this.columnDING_NDOCTO;
                }
            }
            
            internal DataColumn DING_FDOCTOColumn {
                get {
                    return this.columnDING_FDOCTO;
                }
            }
            
            internal DataColumn DING_MDOCTOColumn {
                get {
                    return this.columnDING_MDOCTO;
                }
            }
            
            internal DataColumn INGR_NCORRColumn {
                get {
                    return this.columnINGR_NCORR;
                }
            }
            
            internal DataColumn TING_CCODColumn {
                get {
                    return this.columnTING_CCOD;
                }
            }
            
            internal DataColumn EXPR1Column {
                get {
                    return this.columnEXPR1;
                }
            }
            
            public DETALLERow this[int index] {
                get {
                    return ((DETALLERow)(this.Rows[index]));
                }
            }
            
            public event DETALLERowChangeEventHandler DETALLERowChanged;
            
            public event DETALLERowChangeEventHandler DETALLERowChanging;
            
            public event DETALLERowChangeEventHandler DETALLERowDeleted;
            
            public event DETALLERowChangeEventHandler DETALLERowDeleting;
            
            public void AddDETALLERow(DETALLERow row) {
                this.Rows.Add(row);
            }
            
            public DETALLERow AddDETALLERow(string TING_TDESC, System.Decimal DING_NDOCTO, System.DateTime DING_FDOCTO, System.Decimal DING_MDOCTO, System.Decimal INGR_NCORR, System.Decimal TING_CCOD, System.Decimal EXPR1) {
                DETALLERow rowDETALLERow = ((DETALLERow)(this.NewRow()));
                rowDETALLERow.ItemArray = new object[] {
                        TING_TDESC,
                        DING_NDOCTO,
                        DING_FDOCTO,
                        DING_MDOCTO,
                        INGR_NCORR,
                        TING_CCOD,
                        EXPR1};
                this.Rows.Add(rowDETALLERow);
                return rowDETALLERow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DETALLEDataTable cln = ((DETALLEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DETALLEDataTable();
            }
            
            internal void InitVars() {
                this.columnTING_TDESC = this.Columns["TING_TDESC"];
                this.columnDING_NDOCTO = this.Columns["DING_NDOCTO"];
                this.columnDING_FDOCTO = this.Columns["DING_FDOCTO"];
                this.columnDING_MDOCTO = this.Columns["DING_MDOCTO"];
                this.columnINGR_NCORR = this.Columns["INGR_NCORR"];
                this.columnTING_CCOD = this.Columns["TING_CCOD"];
                this.columnEXPR1 = this.Columns["EXPR1"];
            }
            
            private void InitClass() {
                this.columnTING_TDESC = new DataColumn("TING_TDESC", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTING_TDESC);
                this.columnDING_NDOCTO = new DataColumn("DING_NDOCTO", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDING_NDOCTO);
                this.columnDING_FDOCTO = new DataColumn("DING_FDOCTO", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDING_FDOCTO);
                this.columnDING_MDOCTO = new DataColumn("DING_MDOCTO", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDING_MDOCTO);
                this.columnINGR_NCORR = new DataColumn("INGR_NCORR", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnINGR_NCORR);
                this.columnTING_CCOD = new DataColumn("TING_CCOD", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTING_CCOD);
                this.columnEXPR1 = new DataColumn("EXPR1", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEXPR1);
            }
            
            public DETALLERow NewDETALLERow() {
                return ((DETALLERow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DETALLERow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DETALLERow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DETALLERowChanged != null)) {
                    this.DETALLERowChanged(this, new DETALLERowChangeEvent(((DETALLERow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DETALLERowChanging != null)) {
                    this.DETALLERowChanging(this, new DETALLERowChangeEvent(((DETALLERow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DETALLERowDeleted != null)) {
                    this.DETALLERowDeleted(this, new DETALLERowChangeEvent(((DETALLERow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DETALLERowDeleting != null)) {
                    this.DETALLERowDeleting(this, new DETALLERowChangeEvent(((DETALLERow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDETALLERow(DETALLERow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DETALLERow : DataRow {
            
            private DETALLEDataTable tableDETALLE;
            
            internal DETALLERow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDETALLE = ((DETALLEDataTable)(this.Table));
            }
            
            public string TING_TDESC {
                get {
                    try {
                        return ((string)(this[this.tableDETALLE.TING_TDESCColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLE.TING_TDESCColumn] = value;
                }
            }
            
            public System.Decimal DING_NDOCTO {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDETALLE.DING_NDOCTOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLE.DING_NDOCTOColumn] = value;
                }
            }
            
            public System.DateTime DING_FDOCTO {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDETALLE.DING_FDOCTOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLE.DING_FDOCTOColumn] = value;
                }
            }
            
            public System.Decimal DING_MDOCTO {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDETALLE.DING_MDOCTOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLE.DING_MDOCTOColumn] = value;
                }
            }
            
            public System.Decimal INGR_NCORR {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDETALLE.INGR_NCORRColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLE.INGR_NCORRColumn] = value;
                }
            }
            
            public System.Decimal TING_CCOD {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDETALLE.TING_CCODColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLE.TING_CCODColumn] = value;
                }
            }
            
            public System.Decimal EXPR1 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDETALLE.EXPR1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLE.EXPR1Column] = value;
                }
            }
            
            public bool IsTING_TDESCNull() {
                return this.IsNull(this.tableDETALLE.TING_TDESCColumn);
            }
            
            public void SetTING_TDESCNull() {
                this[this.tableDETALLE.TING_TDESCColumn] = System.Convert.DBNull;
            }
            
            public bool IsDING_NDOCTONull() {
                return this.IsNull(this.tableDETALLE.DING_NDOCTOColumn);
            }
            
            public void SetDING_NDOCTONull() {
                this[this.tableDETALLE.DING_NDOCTOColumn] = System.Convert.DBNull;
            }
            
            public bool IsDING_FDOCTONull() {
                return this.IsNull(this.tableDETALLE.DING_FDOCTOColumn);
            }
            
            public void SetDING_FDOCTONull() {
                this[this.tableDETALLE.DING_FDOCTOColumn] = System.Convert.DBNull;
            }
            
            public bool IsDING_MDOCTONull() {
                return this.IsNull(this.tableDETALLE.DING_MDOCTOColumn);
            }
            
            public void SetDING_MDOCTONull() {
                this[this.tableDETALLE.DING_MDOCTOColumn] = System.Convert.DBNull;
            }
            
            public bool IsINGR_NCORRNull() {
                return this.IsNull(this.tableDETALLE.INGR_NCORRColumn);
            }
            
            public void SetINGR_NCORRNull() {
                this[this.tableDETALLE.INGR_NCORRColumn] = System.Convert.DBNull;
            }
            
            public bool IsTING_CCODNull() {
                return this.IsNull(this.tableDETALLE.TING_CCODColumn);
            }
            
            public void SetTING_CCODNull() {
                this[this.tableDETALLE.TING_CCODColumn] = System.Convert.DBNull;
            }
            
            public bool IsEXPR1Null() {
                return this.IsNull(this.tableDETALLE.EXPR1Column);
            }
            
            public void SetEXPR1Null() {
                this[this.tableDETALLE.EXPR1Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DETALLERowChangeEvent : EventArgs {
            
            private DETALLERow eventRow;
            
            private DataRowAction eventAction;
            
            public DETALLERowChangeEvent(DETALLERow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DETALLERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ENCABEZADODataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCCAR_NCORR;
            
            private DataColumn columnCARRERA_ORIGEN;
            
            private DataColumn columnCARRERA_DESTINO;
            
            private DataColumn columnRUT;
            
            private DataColumn columnNOMBRE;
            
            private DataColumn columnCCAR_FCAMBIO;
            
            private DataColumn columnNOMBRE_APODERADO;
            
            private DataColumn columnSEDE_TDESC;
            
            private DataColumn columnSTRFECHA;
            
            private DataColumn columnSEDE_CCOD;
            
            internal ENCABEZADODataTable() : 
                    base("ENCABEZADO") {
                this.InitClass();
            }
            
            internal ENCABEZADODataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CCAR_NCORRColumn {
                get {
                    return this.columnCCAR_NCORR;
                }
            }
            
            internal DataColumn CARRERA_ORIGENColumn {
                get {
                    return this.columnCARRERA_ORIGEN;
                }
            }
            
            internal DataColumn CARRERA_DESTINOColumn {
                get {
                    return this.columnCARRERA_DESTINO;
                }
            }
            
            internal DataColumn RUTColumn {
                get {
                    return this.columnRUT;
                }
            }
            
            internal DataColumn NOMBREColumn {
                get {
                    return this.columnNOMBRE;
                }
            }
            
            internal DataColumn CCAR_FCAMBIOColumn {
                get {
                    return this.columnCCAR_FCAMBIO;
                }
            }
            
            internal DataColumn NOMBRE_APODERADOColumn {
                get {
                    return this.columnNOMBRE_APODERADO;
                }
            }
            
            internal DataColumn SEDE_TDESCColumn {
                get {
                    return this.columnSEDE_TDESC;
                }
            }
            
            internal DataColumn STRFECHAColumn {
                get {
                    return this.columnSTRFECHA;
                }
            }
            
            internal DataColumn SEDE_CCODColumn {
                get {
                    return this.columnSEDE_CCOD;
                }
            }
            
            public ENCABEZADORow this[int index] {
                get {
                    return ((ENCABEZADORow)(this.Rows[index]));
                }
            }
            
            public event ENCABEZADORowChangeEventHandler ENCABEZADORowChanged;
            
            public event ENCABEZADORowChangeEventHandler ENCABEZADORowChanging;
            
            public event ENCABEZADORowChangeEventHandler ENCABEZADORowDeleted;
            
            public event ENCABEZADORowChangeEventHandler ENCABEZADORowDeleting;
            
            public void AddENCABEZADORow(ENCABEZADORow row) {
                this.Rows.Add(row);
            }
            
            public ENCABEZADORow AddENCABEZADORow(System.Decimal CCAR_NCORR, string CARRERA_ORIGEN, string CARRERA_DESTINO, string RUT, string NOMBRE, System.DateTime CCAR_FCAMBIO, string NOMBRE_APODERADO, string SEDE_TDESC, string STRFECHA, System.Decimal SEDE_CCOD) {
                ENCABEZADORow rowENCABEZADORow = ((ENCABEZADORow)(this.NewRow()));
                rowENCABEZADORow.ItemArray = new object[] {
                        CCAR_NCORR,
                        CARRERA_ORIGEN,
                        CARRERA_DESTINO,
                        RUT,
                        NOMBRE,
                        CCAR_FCAMBIO,
                        NOMBRE_APODERADO,
                        SEDE_TDESC,
                        STRFECHA,
                        SEDE_CCOD};
                this.Rows.Add(rowENCABEZADORow);
                return rowENCABEZADORow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ENCABEZADODataTable cln = ((ENCABEZADODataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ENCABEZADODataTable();
            }
            
            internal void InitVars() {
                this.columnCCAR_NCORR = this.Columns["CCAR_NCORR"];
                this.columnCARRERA_ORIGEN = this.Columns["CARRERA_ORIGEN"];
                this.columnCARRERA_DESTINO = this.Columns["CARRERA_DESTINO"];
                this.columnRUT = this.Columns["RUT"];
                this.columnNOMBRE = this.Columns["NOMBRE"];
                this.columnCCAR_FCAMBIO = this.Columns["CCAR_FCAMBIO"];
                this.columnNOMBRE_APODERADO = this.Columns["NOMBRE_APODERADO"];
                this.columnSEDE_TDESC = this.Columns["SEDE_TDESC"];
                this.columnSTRFECHA = this.Columns["STRFECHA"];
                this.columnSEDE_CCOD = this.Columns["SEDE_CCOD"];
            }
            
            private void InitClass() {
                this.columnCCAR_NCORR = new DataColumn("CCAR_NCORR", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCCAR_NCORR);
                this.columnCARRERA_ORIGEN = new DataColumn("CARRERA_ORIGEN", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCARRERA_ORIGEN);
                this.columnCARRERA_DESTINO = new DataColumn("CARRERA_DESTINO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCARRERA_DESTINO);
                this.columnRUT = new DataColumn("RUT", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRUT);
                this.columnNOMBRE = new DataColumn("NOMBRE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNOMBRE);
                this.columnCCAR_FCAMBIO = new DataColumn("CCAR_FCAMBIO", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCCAR_FCAMBIO);
                this.columnNOMBRE_APODERADO = new DataColumn("NOMBRE_APODERADO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNOMBRE_APODERADO);
                this.columnSEDE_TDESC = new DataColumn("SEDE_TDESC", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSEDE_TDESC);
                this.columnSTRFECHA = new DataColumn("STRFECHA", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSTRFECHA);
                this.columnSEDE_CCOD = new DataColumn("SEDE_CCOD", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSEDE_CCOD);
                this.columnCCAR_NCORR.AllowDBNull = false;
                this.columnCARRERA_ORIGEN.ReadOnly = true;
                this.columnCARRERA_DESTINO.ReadOnly = true;
                this.columnRUT.ReadOnly = true;
                this.columnNOMBRE.ReadOnly = true;
                this.columnNOMBRE_APODERADO.ReadOnly = true;
                this.columnSTRFECHA.ReadOnly = true;
                this.columnSEDE_CCOD.AllowDBNull = false;
            }
            
            public ENCABEZADORow NewENCABEZADORow() {
                return ((ENCABEZADORow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ENCABEZADORow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ENCABEZADORow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ENCABEZADORowChanged != null)) {
                    this.ENCABEZADORowChanged(this, new ENCABEZADORowChangeEvent(((ENCABEZADORow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ENCABEZADORowChanging != null)) {
                    this.ENCABEZADORowChanging(this, new ENCABEZADORowChangeEvent(((ENCABEZADORow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ENCABEZADORowDeleted != null)) {
                    this.ENCABEZADORowDeleted(this, new ENCABEZADORowChangeEvent(((ENCABEZADORow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ENCABEZADORowDeleting != null)) {
                    this.ENCABEZADORowDeleting(this, new ENCABEZADORowChangeEvent(((ENCABEZADORow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveENCABEZADORow(ENCABEZADORow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ENCABEZADORow : DataRow {
            
            private ENCABEZADODataTable tableENCABEZADO;
            
            internal ENCABEZADORow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableENCABEZADO = ((ENCABEZADODataTable)(this.Table));
            }
            
            public System.Decimal CCAR_NCORR {
                get {
                    return ((System.Decimal)(this[this.tableENCABEZADO.CCAR_NCORRColumn]));
                }
                set {
                    this[this.tableENCABEZADO.CCAR_NCORRColumn] = value;
                }
            }
            
            public string CARRERA_ORIGEN {
                get {
                    try {
                        return ((string)(this[this.tableENCABEZADO.CARRERA_ORIGENColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableENCABEZADO.CARRERA_ORIGENColumn] = value;
                }
            }
            
            public string CARRERA_DESTINO {
                get {
                    try {
                        return ((string)(this[this.tableENCABEZADO.CARRERA_DESTINOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableENCABEZADO.CARRERA_DESTINOColumn] = value;
                }
            }
            
            public string RUT {
                get {
                    try {
                        return ((string)(this[this.tableENCABEZADO.RUTColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableENCABEZADO.RUTColumn] = value;
                }
            }
            
            public string NOMBRE {
                get {
                    try {
                        return ((string)(this[this.tableENCABEZADO.NOMBREColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableENCABEZADO.NOMBREColumn] = value;
                }
            }
            
            public System.DateTime CCAR_FCAMBIO {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableENCABEZADO.CCAR_FCAMBIOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableENCABEZADO.CCAR_FCAMBIOColumn] = value;
                }
            }
            
            public string NOMBRE_APODERADO {
                get {
                    try {
                        return ((string)(this[this.tableENCABEZADO.NOMBRE_APODERADOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableENCABEZADO.NOMBRE_APODERADOColumn] = value;
                }
            }
            
            public string SEDE_TDESC {
                get {
                    try {
                        return ((string)(this[this.tableENCABEZADO.SEDE_TDESCColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableENCABEZADO.SEDE_TDESCColumn] = value;
                }
            }
            
            public string STRFECHA {
                get {
                    try {
                        return ((string)(this[this.tableENCABEZADO.STRFECHAColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableENCABEZADO.STRFECHAColumn] = value;
                }
            }
            
            public System.Decimal SEDE_CCOD {
                get {
                    return ((System.Decimal)(this[this.tableENCABEZADO.SEDE_CCODColumn]));
                }
                set {
                    this[this.tableENCABEZADO.SEDE_CCODColumn] = value;
                }
            }
            
            public bool IsCARRERA_ORIGENNull() {
                return this.IsNull(this.tableENCABEZADO.CARRERA_ORIGENColumn);
            }
            
            public void SetCARRERA_ORIGENNull() {
                this[this.tableENCABEZADO.CARRERA_ORIGENColumn] = System.Convert.DBNull;
            }
            
            public bool IsCARRERA_DESTINONull() {
                return this.IsNull(this.tableENCABEZADO.CARRERA_DESTINOColumn);
            }
            
            public void SetCARRERA_DESTINONull() {
                this[this.tableENCABEZADO.CARRERA_DESTINOColumn] = System.Convert.DBNull;
            }
            
            public bool IsRUTNull() {
                return this.IsNull(this.tableENCABEZADO.RUTColumn);
            }
            
            public void SetRUTNull() {
                this[this.tableENCABEZADO.RUTColumn] = System.Convert.DBNull;
            }
            
            public bool IsNOMBRENull() {
                return this.IsNull(this.tableENCABEZADO.NOMBREColumn);
            }
            
            public void SetNOMBRENull() {
                this[this.tableENCABEZADO.NOMBREColumn] = System.Convert.DBNull;
            }
            
            public bool IsCCAR_FCAMBIONull() {
                return this.IsNull(this.tableENCABEZADO.CCAR_FCAMBIOColumn);
            }
            
            public void SetCCAR_FCAMBIONull() {
                this[this.tableENCABEZADO.CCAR_FCAMBIOColumn] = System.Convert.DBNull;
            }
            
            public bool IsNOMBRE_APODERADONull() {
                return this.IsNull(this.tableENCABEZADO.NOMBRE_APODERADOColumn);
            }
            
            public void SetNOMBRE_APODERADONull() {
                this[this.tableENCABEZADO.NOMBRE_APODERADOColumn] = System.Convert.DBNull;
            }
            
            public bool IsSEDE_TDESCNull() {
                return this.IsNull(this.tableENCABEZADO.SEDE_TDESCColumn);
            }
            
            public void SetSEDE_TDESCNull() {
                this[this.tableENCABEZADO.SEDE_TDESCColumn] = System.Convert.DBNull;
            }
            
            public bool IsSTRFECHANull() {
                return this.IsNull(this.tableENCABEZADO.STRFECHAColumn);
            }
            
            public void SetSTRFECHANull() {
                this[this.tableENCABEZADO.STRFECHAColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ENCABEZADORowChangeEvent : EventArgs {
            
            private ENCABEZADORow eventRow;
            
            private DataRowAction eventAction;
            
            public ENCABEZADORowChangeEvent(ENCABEZADORow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ENCABEZADORow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
