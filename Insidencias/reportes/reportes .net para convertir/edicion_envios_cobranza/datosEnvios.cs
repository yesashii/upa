//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace edicion_envios_cobranza {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class datosEnvios : DataSet {
        
        private envios_cobranzaDataTable tableenvios_cobranza;
        
        public datosEnvios() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected datosEnvios(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["envios_cobranza"] != null)) {
                    this.Tables.Add(new envios_cobranzaDataTable(ds.Tables["envios_cobranza"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public envios_cobranzaDataTable envios_cobranza {
            get {
                return this.tableenvios_cobranza;
            }
        }
        
        public override DataSet Clone() {
            datosEnvios cln = ((datosEnvios)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["envios_cobranza"] != null)) {
                this.Tables.Add(new envios_cobranzaDataTable(ds.Tables["envios_cobranza"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableenvios_cobranza = ((envios_cobranzaDataTable)(this.Tables["envios_cobranza"]));
            if ((this.tableenvios_cobranza != null)) {
                this.tableenvios_cobranza.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "datosEnvios";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/datosEnvios.xsd";
            this.Locale = new System.Globalization.CultureInfo("es-ES");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableenvios_cobranza = new envios_cobranzaDataTable();
            this.Tables.Add(this.tableenvios_cobranza);
        }
        
        private bool ShouldSerializeenvios_cobranza() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void envios_cobranzaRowChangeEventHandler(object sender, envios_cobranzaRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class envios_cobranzaDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnESTADO;
            
            private DataColumn columnNRO_DOCTO;
            
            private DataColumn columnRUT_ALUMNO;
            
            private DataColumn columnRUT_APODERADO;
            
            private DataColumn columnNOMBRE_APODERADO;
            
            private DataColumn columnFECHA_EMISION;
            
            private DataColumn columnMONTO;
            
            private DataColumn columnTIPO_DOCTO;
            
            private DataColumn columnNOMBRE_EMPRESA;
            
            private DataColumn columnFECHA_REPORTE;
            
            private DataColumn columnNRO_FOLIO;
            
            private DataColumn columnc_corriente;
            
            private DataColumn columnmulta_protesto;
            
            internal envios_cobranzaDataTable() : 
                    base("envios_cobranza") {
                this.InitClass();
            }
            
            internal envios_cobranzaDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ESTADOColumn {
                get {
                    return this.columnESTADO;
                }
            }
            
            internal DataColumn NRO_DOCTOColumn {
                get {
                    return this.columnNRO_DOCTO;
                }
            }
            
            internal DataColumn RUT_ALUMNOColumn {
                get {
                    return this.columnRUT_ALUMNO;
                }
            }
            
            internal DataColumn RUT_APODERADOColumn {
                get {
                    return this.columnRUT_APODERADO;
                }
            }
            
            internal DataColumn NOMBRE_APODERADOColumn {
                get {
                    return this.columnNOMBRE_APODERADO;
                }
            }
            
            internal DataColumn FECHA_EMISIONColumn {
                get {
                    return this.columnFECHA_EMISION;
                }
            }
            
            internal DataColumn MONTOColumn {
                get {
                    return this.columnMONTO;
                }
            }
            
            internal DataColumn TIPO_DOCTOColumn {
                get {
                    return this.columnTIPO_DOCTO;
                }
            }
            
            internal DataColumn NOMBRE_EMPRESAColumn {
                get {
                    return this.columnNOMBRE_EMPRESA;
                }
            }
            
            internal DataColumn FECHA_REPORTEColumn {
                get {
                    return this.columnFECHA_REPORTE;
                }
            }
            
            internal DataColumn NRO_FOLIOColumn {
                get {
                    return this.columnNRO_FOLIO;
                }
            }
            
            internal DataColumn c_corrienteColumn {
                get {
                    return this.columnc_corriente;
                }
            }
            
            internal DataColumn multa_protestoColumn {
                get {
                    return this.columnmulta_protesto;
                }
            }
            
            public envios_cobranzaRow this[int index] {
                get {
                    return ((envios_cobranzaRow)(this.Rows[index]));
                }
            }
            
            public event envios_cobranzaRowChangeEventHandler envios_cobranzaRowChanged;
            
            public event envios_cobranzaRowChangeEventHandler envios_cobranzaRowChanging;
            
            public event envios_cobranzaRowChangeEventHandler envios_cobranzaRowDeleted;
            
            public event envios_cobranzaRowChangeEventHandler envios_cobranzaRowDeleting;
            
            public void Addenvios_cobranzaRow(envios_cobranzaRow row) {
                this.Rows.Add(row);
            }
            
            public envios_cobranzaRow Addenvios_cobranzaRow(string ESTADO, string NRO_DOCTO, string RUT_ALUMNO, string RUT_APODERADO, string NOMBRE_APODERADO, string FECHA_EMISION, string MONTO, string TIPO_DOCTO, string NOMBRE_EMPRESA, string FECHA_REPORTE, string NRO_FOLIO, string c_corriente, string multa_protesto) {
                envios_cobranzaRow rowenvios_cobranzaRow = ((envios_cobranzaRow)(this.NewRow()));
                rowenvios_cobranzaRow.ItemArray = new object[] {
                        ESTADO,
                        NRO_DOCTO,
                        RUT_ALUMNO,
                        RUT_APODERADO,
                        NOMBRE_APODERADO,
                        FECHA_EMISION,
                        MONTO,
                        TIPO_DOCTO,
                        NOMBRE_EMPRESA,
                        FECHA_REPORTE,
                        NRO_FOLIO,
                        c_corriente,
                        multa_protesto};
                this.Rows.Add(rowenvios_cobranzaRow);
                return rowenvios_cobranzaRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                envios_cobranzaDataTable cln = ((envios_cobranzaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new envios_cobranzaDataTable();
            }
            
            internal void InitVars() {
                this.columnESTADO = this.Columns["ESTADO"];
                this.columnNRO_DOCTO = this.Columns["NRO_DOCTO"];
                this.columnRUT_ALUMNO = this.Columns["RUT_ALUMNO"];
                this.columnRUT_APODERADO = this.Columns["RUT_APODERADO"];
                this.columnNOMBRE_APODERADO = this.Columns["NOMBRE_APODERADO"];
                this.columnFECHA_EMISION = this.Columns["FECHA_EMISION"];
                this.columnMONTO = this.Columns["MONTO"];
                this.columnTIPO_DOCTO = this.Columns["TIPO_DOCTO"];
                this.columnNOMBRE_EMPRESA = this.Columns["NOMBRE_EMPRESA"];
                this.columnFECHA_REPORTE = this.Columns["FECHA_REPORTE"];
                this.columnNRO_FOLIO = this.Columns["NRO_FOLIO"];
                this.columnc_corriente = this.Columns["c_corriente"];
                this.columnmulta_protesto = this.Columns["multa_protesto"];
            }
            
            private void InitClass() {
                this.columnESTADO = new DataColumn("ESTADO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnESTADO);
                this.columnNRO_DOCTO = new DataColumn("NRO_DOCTO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNRO_DOCTO);
                this.columnRUT_ALUMNO = new DataColumn("RUT_ALUMNO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRUT_ALUMNO);
                this.columnRUT_APODERADO = new DataColumn("RUT_APODERADO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRUT_APODERADO);
                this.columnNOMBRE_APODERADO = new DataColumn("NOMBRE_APODERADO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNOMBRE_APODERADO);
                this.columnFECHA_EMISION = new DataColumn("FECHA_EMISION", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFECHA_EMISION);
                this.columnMONTO = new DataColumn("MONTO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMONTO);
                this.columnTIPO_DOCTO = new DataColumn("TIPO_DOCTO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTIPO_DOCTO);
                this.columnNOMBRE_EMPRESA = new DataColumn("NOMBRE_EMPRESA", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNOMBRE_EMPRESA);
                this.columnFECHA_REPORTE = new DataColumn("FECHA_REPORTE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFECHA_REPORTE);
                this.columnNRO_FOLIO = new DataColumn("NRO_FOLIO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNRO_FOLIO);
                this.columnc_corriente = new DataColumn("c_corriente", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnc_corriente);
                this.columnmulta_protesto = new DataColumn("multa_protesto", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmulta_protesto);
                this.columnESTADO.ReadOnly = true;
                this.columnNRO_DOCTO.ReadOnly = true;
                this.columnRUT_ALUMNO.ReadOnly = true;
                this.columnRUT_APODERADO.ReadOnly = true;
                this.columnNOMBRE_APODERADO.ReadOnly = true;
                this.columnFECHA_EMISION.ReadOnly = true;
                this.columnMONTO.ReadOnly = true;
            }
            
            public envios_cobranzaRow Newenvios_cobranzaRow() {
                return ((envios_cobranzaRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new envios_cobranzaRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(envios_cobranzaRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.envios_cobranzaRowChanged != null)) {
                    this.envios_cobranzaRowChanged(this, new envios_cobranzaRowChangeEvent(((envios_cobranzaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.envios_cobranzaRowChanging != null)) {
                    this.envios_cobranzaRowChanging(this, new envios_cobranzaRowChangeEvent(((envios_cobranzaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.envios_cobranzaRowDeleted != null)) {
                    this.envios_cobranzaRowDeleted(this, new envios_cobranzaRowChangeEvent(((envios_cobranzaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.envios_cobranzaRowDeleting != null)) {
                    this.envios_cobranzaRowDeleting(this, new envios_cobranzaRowChangeEvent(((envios_cobranzaRow)(e.Row)), e.Action));
                }
            }
            
            public void Removeenvios_cobranzaRow(envios_cobranzaRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class envios_cobranzaRow : DataRow {
            
            private envios_cobranzaDataTable tableenvios_cobranza;
            
            internal envios_cobranzaRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableenvios_cobranza = ((envios_cobranzaDataTable)(this.Table));
            }
            
            public string ESTADO {
                get {
                    try {
                        return ((string)(this[this.tableenvios_cobranza.ESTADOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableenvios_cobranza.ESTADOColumn] = value;
                }
            }
            
            public string NRO_DOCTO {
                get {
                    try {
                        return ((string)(this[this.tableenvios_cobranza.NRO_DOCTOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableenvios_cobranza.NRO_DOCTOColumn] = value;
                }
            }
            
            public string RUT_ALUMNO {
                get {
                    try {
                        return ((string)(this[this.tableenvios_cobranza.RUT_ALUMNOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableenvios_cobranza.RUT_ALUMNOColumn] = value;
                }
            }
            
            public string RUT_APODERADO {
                get {
                    try {
                        return ((string)(this[this.tableenvios_cobranza.RUT_APODERADOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableenvios_cobranza.RUT_APODERADOColumn] = value;
                }
            }
            
            public string NOMBRE_APODERADO {
                get {
                    try {
                        return ((string)(this[this.tableenvios_cobranza.NOMBRE_APODERADOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableenvios_cobranza.NOMBRE_APODERADOColumn] = value;
                }
            }
            
            public string FECHA_EMISION {
                get {
                    try {
                        return ((string)(this[this.tableenvios_cobranza.FECHA_EMISIONColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableenvios_cobranza.FECHA_EMISIONColumn] = value;
                }
            }
            
            public string MONTO {
                get {
                    try {
                        return ((string)(this[this.tableenvios_cobranza.MONTOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableenvios_cobranza.MONTOColumn] = value;
                }
            }
            
            public string TIPO_DOCTO {
                get {
                    try {
                        return ((string)(this[this.tableenvios_cobranza.TIPO_DOCTOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableenvios_cobranza.TIPO_DOCTOColumn] = value;
                }
            }
            
            public string NOMBRE_EMPRESA {
                get {
                    try {
                        return ((string)(this[this.tableenvios_cobranza.NOMBRE_EMPRESAColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableenvios_cobranza.NOMBRE_EMPRESAColumn] = value;
                }
            }
            
            public string FECHA_REPORTE {
                get {
                    try {
                        return ((string)(this[this.tableenvios_cobranza.FECHA_REPORTEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableenvios_cobranza.FECHA_REPORTEColumn] = value;
                }
            }
            
            public string NRO_FOLIO {
                get {
                    try {
                        return ((string)(this[this.tableenvios_cobranza.NRO_FOLIOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableenvios_cobranza.NRO_FOLIOColumn] = value;
                }
            }
            
            public string c_corriente {
                get {
                    try {
                        return ((string)(this[this.tableenvios_cobranza.c_corrienteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableenvios_cobranza.c_corrienteColumn] = value;
                }
            }
            
            public string multa_protesto {
                get {
                    try {
                        return ((string)(this[this.tableenvios_cobranza.multa_protestoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableenvios_cobranza.multa_protestoColumn] = value;
                }
            }
            
            public bool IsESTADONull() {
                return this.IsNull(this.tableenvios_cobranza.ESTADOColumn);
            }
            
            public void SetESTADONull() {
                this[this.tableenvios_cobranza.ESTADOColumn] = System.Convert.DBNull;
            }
            
            public bool IsNRO_DOCTONull() {
                return this.IsNull(this.tableenvios_cobranza.NRO_DOCTOColumn);
            }
            
            public void SetNRO_DOCTONull() {
                this[this.tableenvios_cobranza.NRO_DOCTOColumn] = System.Convert.DBNull;
            }
            
            public bool IsRUT_ALUMNONull() {
                return this.IsNull(this.tableenvios_cobranza.RUT_ALUMNOColumn);
            }
            
            public void SetRUT_ALUMNONull() {
                this[this.tableenvios_cobranza.RUT_ALUMNOColumn] = System.Convert.DBNull;
            }
            
            public bool IsRUT_APODERADONull() {
                return this.IsNull(this.tableenvios_cobranza.RUT_APODERADOColumn);
            }
            
            public void SetRUT_APODERADONull() {
                this[this.tableenvios_cobranza.RUT_APODERADOColumn] = System.Convert.DBNull;
            }
            
            public bool IsNOMBRE_APODERADONull() {
                return this.IsNull(this.tableenvios_cobranza.NOMBRE_APODERADOColumn);
            }
            
            public void SetNOMBRE_APODERADONull() {
                this[this.tableenvios_cobranza.NOMBRE_APODERADOColumn] = System.Convert.DBNull;
            }
            
            public bool IsFECHA_EMISIONNull() {
                return this.IsNull(this.tableenvios_cobranza.FECHA_EMISIONColumn);
            }
            
            public void SetFECHA_EMISIONNull() {
                this[this.tableenvios_cobranza.FECHA_EMISIONColumn] = System.Convert.DBNull;
            }
            
            public bool IsMONTONull() {
                return this.IsNull(this.tableenvios_cobranza.MONTOColumn);
            }
            
            public void SetMONTONull() {
                this[this.tableenvios_cobranza.MONTOColumn] = System.Convert.DBNull;
            }
            
            public bool IsTIPO_DOCTONull() {
                return this.IsNull(this.tableenvios_cobranza.TIPO_DOCTOColumn);
            }
            
            public void SetTIPO_DOCTONull() {
                this[this.tableenvios_cobranza.TIPO_DOCTOColumn] = System.Convert.DBNull;
            }
            
            public bool IsNOMBRE_EMPRESANull() {
                return this.IsNull(this.tableenvios_cobranza.NOMBRE_EMPRESAColumn);
            }
            
            public void SetNOMBRE_EMPRESANull() {
                this[this.tableenvios_cobranza.NOMBRE_EMPRESAColumn] = System.Convert.DBNull;
            }
            
            public bool IsFECHA_REPORTENull() {
                return this.IsNull(this.tableenvios_cobranza.FECHA_REPORTEColumn);
            }
            
            public void SetFECHA_REPORTENull() {
                this[this.tableenvios_cobranza.FECHA_REPORTEColumn] = System.Convert.DBNull;
            }
            
            public bool IsNRO_FOLIONull() {
                return this.IsNull(this.tableenvios_cobranza.NRO_FOLIOColumn);
            }
            
            public void SetNRO_FOLIONull() {
                this[this.tableenvios_cobranza.NRO_FOLIOColumn] = System.Convert.DBNull;
            }
            
            public bool Isc_corrienteNull() {
                return this.IsNull(this.tableenvios_cobranza.c_corrienteColumn);
            }
            
            public void Setc_corrienteNull() {
                this[this.tableenvios_cobranza.c_corrienteColumn] = System.Convert.DBNull;
            }
            
            public bool Ismulta_protestoNull() {
                return this.IsNull(this.tableenvios_cobranza.multa_protestoColumn);
            }
            
            public void Setmulta_protestoNull() {
                this[this.tableenvios_cobranza.multa_protestoColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class envios_cobranzaRowChangeEvent : EventArgs {
            
            private envios_cobranzaRow eventRow;
            
            private DataRowAction eventAction;
            
            public envios_cobranzaRowChangeEvent(envios_cobranzaRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public envios_cobranzaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
