//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.6060
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace repactaciones {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSet1 : DataSet {
        
        private DETALLESDataTable tableDETALLES;
        
        private ENCABEZADODataTable tableENCABEZADO;
        
        public DataSet1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSet1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DETALLES"] != null)) {
                    this.Tables.Add(new DETALLESDataTable(ds.Tables["DETALLES"]));
                }
                if ((ds.Tables["ENCABEZADO"] != null)) {
                    this.Tables.Add(new ENCABEZADODataTable(ds.Tables["ENCABEZADO"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DETALLESDataTable DETALLES {
            get {
                return this.tableDETALLES;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ENCABEZADODataTable ENCABEZADO {
            get {
                return this.tableENCABEZADO;
            }
        }
        
        public override DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["DETALLES"] != null)) {
                this.Tables.Add(new DETALLESDataTable(ds.Tables["DETALLES"]));
            }
            if ((ds.Tables["ENCABEZADO"] != null)) {
                this.Tables.Add(new ENCABEZADODataTable(ds.Tables["ENCABEZADO"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDETALLES = ((DETALLESDataTable)(this.Tables["DETALLES"]));
            if ((this.tableDETALLES != null)) {
                this.tableDETALLES.InitVars();
            }
            this.tableENCABEZADO = ((ENCABEZADODataTable)(this.Tables["ENCABEZADO"]));
            if ((this.tableENCABEZADO != null)) {
                this.tableENCABEZADO.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSet1.xsd";
            this.Locale = new System.Globalization.CultureInfo("es-ES");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableDETALLES = new DETALLESDataTable();
            this.Tables.Add(this.tableDETALLES);
            this.tableENCABEZADO = new ENCABEZADODataTable();
            this.Tables.Add(this.tableENCABEZADO);
        }
        
        private bool ShouldSerializeDETALLES() {
            return false;
        }
        
        private bool ShouldSerializeENCABEZADO() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DETALLESRowChangeEventHandler(object sender, DETALLESRowChangeEvent e);
        
        public delegate void ENCABEZADORowChangeEventHandler(object sender, ENCABEZADORowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DETALLESDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnORDEN;
            
            private DataColumn columnENCABEZADO;
            
            private DataColumn columnTING_CCOD;
            
            private DataColumn columnINGR_NCORR;
            
            private DataColumn columnDING_NDOCTO;
            
            private DataColumn columnBANC_TDESC;
            
            private DataColumn columnDING_FDOCTO;
            
            private DataColumn columnBANC_CCOD;
            
            private DataColumn columnTING_TDESC;
            
            private DataColumn columnMONTO1;
            
            private DataColumn columnMONTO2;
            
            private DataColumn columnMONTO3;
            
            internal DETALLESDataTable() : 
                    base("DETALLES") {
                this.InitClass();
            }
            
            internal DETALLESDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ORDENColumn {
                get {
                    return this.columnORDEN;
                }
            }
            
            internal DataColumn ENCABEZADOColumn {
                get {
                    return this.columnENCABEZADO;
                }
            }
            
            internal DataColumn TING_CCODColumn {
                get {
                    return this.columnTING_CCOD;
                }
            }
            
            internal DataColumn INGR_NCORRColumn {
                get {
                    return this.columnINGR_NCORR;
                }
            }
            
            internal DataColumn DING_NDOCTOColumn {
                get {
                    return this.columnDING_NDOCTO;
                }
            }
            
            internal DataColumn BANC_TDESCColumn {
                get {
                    return this.columnBANC_TDESC;
                }
            }
            
            internal DataColumn DING_FDOCTOColumn {
                get {
                    return this.columnDING_FDOCTO;
                }
            }
            
            internal DataColumn BANC_CCODColumn {
                get {
                    return this.columnBANC_CCOD;
                }
            }
            
            internal DataColumn TING_TDESCColumn {
                get {
                    return this.columnTING_TDESC;
                }
            }
            
            internal DataColumn MONTO1Column {
                get {
                    return this.columnMONTO1;
                }
            }
            
            internal DataColumn MONTO2Column {
                get {
                    return this.columnMONTO2;
                }
            }
            
            internal DataColumn MONTO3Column {
                get {
                    return this.columnMONTO3;
                }
            }
            
            public DETALLESRow this[int index] {
                get {
                    return ((DETALLESRow)(this.Rows[index]));
                }
            }
            
            public event DETALLESRowChangeEventHandler DETALLESRowChanged;
            
            public event DETALLESRowChangeEventHandler DETALLESRowChanging;
            
            public event DETALLESRowChangeEventHandler DETALLESRowDeleted;
            
            public event DETALLESRowChangeEventHandler DETALLESRowDeleting;
            
            public void AddDETALLESRow(DETALLESRow row) {
                this.Rows.Add(row);
            }
            
            public DETALLESRow AddDETALLESRow(int ORDEN, string ENCABEZADO, int TING_CCOD, int INGR_NCORR, string DING_NDOCTO, string BANC_TDESC, System.DateTime DING_FDOCTO, int BANC_CCOD, string TING_TDESC, int MONTO1, int MONTO2, int MONTO3) {
                DETALLESRow rowDETALLESRow = ((DETALLESRow)(this.NewRow()));
                rowDETALLESRow.ItemArray = new object[] {
                        ORDEN,
                        ENCABEZADO,
                        TING_CCOD,
                        INGR_NCORR,
                        DING_NDOCTO,
                        BANC_TDESC,
                        DING_FDOCTO,
                        BANC_CCOD,
                        TING_TDESC,
                        MONTO1,
                        MONTO2,
                        MONTO3};
                this.Rows.Add(rowDETALLESRow);
                return rowDETALLESRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DETALLESDataTable cln = ((DETALLESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DETALLESDataTable();
            }
            
            internal void InitVars() {
                this.columnORDEN = this.Columns["ORDEN"];
                this.columnENCABEZADO = this.Columns["ENCABEZADO"];
                this.columnTING_CCOD = this.Columns["TING_CCOD"];
                this.columnINGR_NCORR = this.Columns["INGR_NCORR"];
                this.columnDING_NDOCTO = this.Columns["DING_NDOCTO"];
                this.columnBANC_TDESC = this.Columns["BANC_TDESC"];
                this.columnDING_FDOCTO = this.Columns["DING_FDOCTO"];
                this.columnBANC_CCOD = this.Columns["BANC_CCOD"];
                this.columnTING_TDESC = this.Columns["TING_TDESC"];
                this.columnMONTO1 = this.Columns["MONTO1"];
                this.columnMONTO2 = this.Columns["MONTO2"];
                this.columnMONTO3 = this.Columns["MONTO3"];
            }
            
            private void InitClass() {
                this.columnORDEN = new DataColumn("ORDEN", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnORDEN);
                this.columnENCABEZADO = new DataColumn("ENCABEZADO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnENCABEZADO);
                this.columnTING_CCOD = new DataColumn("TING_CCOD", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTING_CCOD);
                this.columnINGR_NCORR = new DataColumn("INGR_NCORR", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnINGR_NCORR);
                this.columnDING_NDOCTO = new DataColumn("DING_NDOCTO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDING_NDOCTO);
                this.columnBANC_TDESC = new DataColumn("BANC_TDESC", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBANC_TDESC);
                this.columnDING_FDOCTO = new DataColumn("DING_FDOCTO", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDING_FDOCTO);
                this.columnBANC_CCOD = new DataColumn("BANC_CCOD", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBANC_CCOD);
                this.columnTING_TDESC = new DataColumn("TING_TDESC", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTING_TDESC);
                this.columnMONTO1 = new DataColumn("MONTO1", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMONTO1);
                this.columnMONTO2 = new DataColumn("MONTO2", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMONTO2);
                this.columnMONTO3 = new DataColumn("MONTO3", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMONTO3);
                this.columnORDEN.ReadOnly = true;
                this.columnENCABEZADO.ReadOnly = true;
                this.columnTING_CCOD.ReadOnly = true;
                this.columnINGR_NCORR.ReadOnly = true;
                this.columnDING_NDOCTO.ReadOnly = true;
                this.columnBANC_TDESC.ReadOnly = true;
                this.columnDING_FDOCTO.ReadOnly = true;
                this.columnBANC_CCOD.ReadOnly = true;
                this.columnTING_TDESC.ReadOnly = true;
                this.columnMONTO1.ReadOnly = true;
                this.columnMONTO2.ReadOnly = true;
                this.columnMONTO3.ReadOnly = true;
            }
            
            public DETALLESRow NewDETALLESRow() {
                return ((DETALLESRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DETALLESRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DETALLESRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DETALLESRowChanged != null)) {
                    this.DETALLESRowChanged(this, new DETALLESRowChangeEvent(((DETALLESRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DETALLESRowChanging != null)) {
                    this.DETALLESRowChanging(this, new DETALLESRowChangeEvent(((DETALLESRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DETALLESRowDeleted != null)) {
                    this.DETALLESRowDeleted(this, new DETALLESRowChangeEvent(((DETALLESRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DETALLESRowDeleting != null)) {
                    this.DETALLESRowDeleting(this, new DETALLESRowChangeEvent(((DETALLESRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDETALLESRow(DETALLESRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DETALLESRow : DataRow {
            
            private DETALLESDataTable tableDETALLES;
            
            internal DETALLESRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDETALLES = ((DETALLESDataTable)(this.Table));
            }
            
            public int ORDEN {
                get {
                    try {
                        return ((int)(this[this.tableDETALLES.ORDENColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.ORDENColumn] = value;
                }
            }
            
            public string ENCABEZADO {
                get {
                    try {
                        return ((string)(this[this.tableDETALLES.ENCABEZADOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.ENCABEZADOColumn] = value;
                }
            }
            
            public int TING_CCOD {
                get {
                    try {
                        return ((int)(this[this.tableDETALLES.TING_CCODColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.TING_CCODColumn] = value;
                }
            }
            
            public int INGR_NCORR {
                get {
                    try {
                        return ((int)(this[this.tableDETALLES.INGR_NCORRColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.INGR_NCORRColumn] = value;
                }
            }
            
            public string DING_NDOCTO {
                get {
                    try {
                        return ((string)(this[this.tableDETALLES.DING_NDOCTOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.DING_NDOCTOColumn] = value;
                }
            }
            
            public string BANC_TDESC {
                get {
                    try {
                        return ((string)(this[this.tableDETALLES.BANC_TDESCColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.BANC_TDESCColumn] = value;
                }
            }
            
            public System.DateTime DING_FDOCTO {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDETALLES.DING_FDOCTOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.DING_FDOCTOColumn] = value;
                }
            }
            
            public int BANC_CCOD {
                get {
                    try {
                        return ((int)(this[this.tableDETALLES.BANC_CCODColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.BANC_CCODColumn] = value;
                }
            }
            
            public string TING_TDESC {
                get {
                    try {
                        return ((string)(this[this.tableDETALLES.TING_TDESCColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.TING_TDESCColumn] = value;
                }
            }
            
            public int MONTO1 {
                get {
                    try {
                        return ((int)(this[this.tableDETALLES.MONTO1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.MONTO1Column] = value;
                }
            }
            
            public int MONTO2 {
                get {
                    try {
                        return ((int)(this[this.tableDETALLES.MONTO2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.MONTO2Column] = value;
                }
            }
            
            public int MONTO3 {
                get {
                    try {
                        return ((int)(this[this.tableDETALLES.MONTO3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableDETALLES.MONTO3Column] = value;
                }
            }
            
            public bool IsORDENNull() {
                return this.IsNull(this.tableDETALLES.ORDENColumn);
            }
            
            public void SetORDENNull() {
                this[this.tableDETALLES.ORDENColumn] = System.Convert.DBNull;
            }
            
            public bool IsENCABEZADONull() {
                return this.IsNull(this.tableDETALLES.ENCABEZADOColumn);
            }
            
            public void SetENCABEZADONull() {
                this[this.tableDETALLES.ENCABEZADOColumn] = System.Convert.DBNull;
            }
            
            public bool IsTING_CCODNull() {
                return this.IsNull(this.tableDETALLES.TING_CCODColumn);
            }
            
            public void SetTING_CCODNull() {
                this[this.tableDETALLES.TING_CCODColumn] = System.Convert.DBNull;
            }
            
            public bool IsINGR_NCORRNull() {
                return this.IsNull(this.tableDETALLES.INGR_NCORRColumn);
            }
            
            public void SetINGR_NCORRNull() {
                this[this.tableDETALLES.INGR_NCORRColumn] = System.Convert.DBNull;
            }
            
            public bool IsDING_NDOCTONull() {
                return this.IsNull(this.tableDETALLES.DING_NDOCTOColumn);
            }
            
            public void SetDING_NDOCTONull() {
                this[this.tableDETALLES.DING_NDOCTOColumn] = System.Convert.DBNull;
            }
            
            public bool IsBANC_TDESCNull() {
                return this.IsNull(this.tableDETALLES.BANC_TDESCColumn);
            }
            
            public void SetBANC_TDESCNull() {
                this[this.tableDETALLES.BANC_TDESCColumn] = System.Convert.DBNull;
            }
            
            public bool IsDING_FDOCTONull() {
                return this.IsNull(this.tableDETALLES.DING_FDOCTOColumn);
            }
            
            public void SetDING_FDOCTONull() {
                this[this.tableDETALLES.DING_FDOCTOColumn] = System.Convert.DBNull;
            }
            
            public bool IsBANC_CCODNull() {
                return this.IsNull(this.tableDETALLES.BANC_CCODColumn);
            }
            
            public void SetBANC_CCODNull() {
                this[this.tableDETALLES.BANC_CCODColumn] = System.Convert.DBNull;
            }
            
            public bool IsTING_TDESCNull() {
                return this.IsNull(this.tableDETALLES.TING_TDESCColumn);
            }
            
            public void SetTING_TDESCNull() {
                this[this.tableDETALLES.TING_TDESCColumn] = System.Convert.DBNull;
            }
            
            public bool IsMONTO1Null() {
                return this.IsNull(this.tableDETALLES.MONTO1Column);
            }
            
            public void SetMONTO1Null() {
                this[this.tableDETALLES.MONTO1Column] = System.Convert.DBNull;
            }
            
            public bool IsMONTO2Null() {
                return this.IsNull(this.tableDETALLES.MONTO2Column);
            }
            
            public void SetMONTO2Null() {
                this[this.tableDETALLES.MONTO2Column] = System.Convert.DBNull;
            }
            
            public bool IsMONTO3Null() {
                return this.IsNull(this.tableDETALLES.MONTO3Column);
            }
            
            public void SetMONTO3Null() {
                this[this.tableDETALLES.MONTO3Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DETALLESRowChangeEvent : EventArgs {
            
            private DETALLESRow eventRow;
            
            private DataRowAction eventAction;
            
            public DETALLESRowChangeEvent(DETALLESRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DETALLESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ENCABEZADODataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnNOMBRE_COMPLETO;
            
            private DataColumn columnRUT;
            
            private DataColumn columnREPA_NCORR;
            
            private DataColumn columnREPA_FREPACTACION;
            
            private DataColumn columnMREP_TDESC;
            
            private DataColumn columncorrelativo;
            
            internal ENCABEZADODataTable() : 
                    base("ENCABEZADO") {
                this.InitClass();
            }
            
            internal ENCABEZADODataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NOMBRE_COMPLETOColumn {
                get {
                    return this.columnNOMBRE_COMPLETO;
                }
            }
            
            internal DataColumn RUTColumn {
                get {
                    return this.columnRUT;
                }
            }
            
            internal DataColumn REPA_NCORRColumn {
                get {
                    return this.columnREPA_NCORR;
                }
            }
            
            internal DataColumn REPA_FREPACTACIONColumn {
                get {
                    return this.columnREPA_FREPACTACION;
                }
            }
            
            internal DataColumn MREP_TDESCColumn {
                get {
                    return this.columnMREP_TDESC;
                }
            }
            
            internal DataColumn correlativoColumn {
                get {
                    return this.columncorrelativo;
                }
            }
            
            public ENCABEZADORow this[int index] {
                get {
                    return ((ENCABEZADORow)(this.Rows[index]));
                }
            }
            
            public event ENCABEZADORowChangeEventHandler ENCABEZADORowChanged;
            
            public event ENCABEZADORowChangeEventHandler ENCABEZADORowChanging;
            
            public event ENCABEZADORowChangeEventHandler ENCABEZADORowDeleted;
            
            public event ENCABEZADORowChangeEventHandler ENCABEZADORowDeleting;
            
            public void AddENCABEZADORow(ENCABEZADORow row) {
                this.Rows.Add(row);
            }
            
            public ENCABEZADORow AddENCABEZADORow(string NOMBRE_COMPLETO, string RUT, string REPA_NCORR, string REPA_FREPACTACION, string MREP_TDESC, string correlativo) {
                ENCABEZADORow rowENCABEZADORow = ((ENCABEZADORow)(this.NewRow()));
                rowENCABEZADORow.ItemArray = new object[] {
                        NOMBRE_COMPLETO,
                        RUT,
                        REPA_NCORR,
                        REPA_FREPACTACION,
                        MREP_TDESC,
                        correlativo};
                this.Rows.Add(rowENCABEZADORow);
                return rowENCABEZADORow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ENCABEZADODataTable cln = ((ENCABEZADODataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ENCABEZADODataTable();
            }
            
            internal void InitVars() {
                this.columnNOMBRE_COMPLETO = this.Columns["NOMBRE_COMPLETO"];
                this.columnRUT = this.Columns["RUT"];
                this.columnREPA_NCORR = this.Columns["REPA_NCORR"];
                this.columnREPA_FREPACTACION = this.Columns["REPA_FREPACTACION"];
                this.columnMREP_TDESC = this.Columns["MREP_TDESC"];
                this.columncorrelativo = this.Columns["correlativo"];
            }
            
            private void InitClass() {
                this.columnNOMBRE_COMPLETO = new DataColumn("NOMBRE_COMPLETO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNOMBRE_COMPLETO);
                this.columnRUT = new DataColumn("RUT", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRUT);
                this.columnREPA_NCORR = new DataColumn("REPA_NCORR", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnREPA_NCORR);
                this.columnREPA_FREPACTACION = new DataColumn("REPA_FREPACTACION", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnREPA_FREPACTACION);
                this.columnMREP_TDESC = new DataColumn("MREP_TDESC", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMREP_TDESC);
                this.columncorrelativo = new DataColumn("correlativo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncorrelativo);
                this.columnNOMBRE_COMPLETO.ReadOnly = true;
                this.columnRUT.ReadOnly = true;
                this.columnREPA_NCORR.ReadOnly = true;
                this.columnREPA_FREPACTACION.ReadOnly = true;
                this.columnMREP_TDESC.ReadOnly = true;
                this.columncorrelativo.ReadOnly = true;
            }
            
            public ENCABEZADORow NewENCABEZADORow() {
                return ((ENCABEZADORow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ENCABEZADORow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ENCABEZADORow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ENCABEZADORowChanged != null)) {
                    this.ENCABEZADORowChanged(this, new ENCABEZADORowChangeEvent(((ENCABEZADORow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ENCABEZADORowChanging != null)) {
                    this.ENCABEZADORowChanging(this, new ENCABEZADORowChangeEvent(((ENCABEZADORow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ENCABEZADORowDeleted != null)) {
                    this.ENCABEZADORowDeleted(this, new ENCABEZADORowChangeEvent(((ENCABEZADORow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ENCABEZADORowDeleting != null)) {
                    this.ENCABEZADORowDeleting(this, new ENCABEZADORowChangeEvent(((ENCABEZADORow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveENCABEZADORow(ENCABEZADORow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ENCABEZADORow : DataRow {
            
            private ENCABEZADODataTable tableENCABEZADO;
            
            internal ENCABEZADORow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableENCABEZADO = ((ENCABEZADODataTable)(this.Table));
            }
            
            public string NOMBRE_COMPLETO {
                get {
                    try {
                        return ((string)(this[this.tableENCABEZADO.NOMBRE_COMPLETOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableENCABEZADO.NOMBRE_COMPLETOColumn] = value;
                }
            }
            
            public string RUT {
                get {
                    try {
                        return ((string)(this[this.tableENCABEZADO.RUTColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableENCABEZADO.RUTColumn] = value;
                }
            }
            
            public string REPA_NCORR {
                get {
                    try {
                        return ((string)(this[this.tableENCABEZADO.REPA_NCORRColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableENCABEZADO.REPA_NCORRColumn] = value;
                }
            }
            
            public string REPA_FREPACTACION {
                get {
                    try {
                        return ((string)(this[this.tableENCABEZADO.REPA_FREPACTACIONColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableENCABEZADO.REPA_FREPACTACIONColumn] = value;
                }
            }
            
            public string MREP_TDESC {
                get {
                    try {
                        return ((string)(this[this.tableENCABEZADO.MREP_TDESCColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableENCABEZADO.MREP_TDESCColumn] = value;
                }
            }
            
            public string correlativo {
                get {
                    try {
                        return ((string)(this[this.tableENCABEZADO.correlativoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableENCABEZADO.correlativoColumn] = value;
                }
            }
            
            public bool IsNOMBRE_COMPLETONull() {
                return this.IsNull(this.tableENCABEZADO.NOMBRE_COMPLETOColumn);
            }
            
            public void SetNOMBRE_COMPLETONull() {
                this[this.tableENCABEZADO.NOMBRE_COMPLETOColumn] = System.Convert.DBNull;
            }
            
            public bool IsRUTNull() {
                return this.IsNull(this.tableENCABEZADO.RUTColumn);
            }
            
            public void SetRUTNull() {
                this[this.tableENCABEZADO.RUTColumn] = System.Convert.DBNull;
            }
            
            public bool IsREPA_NCORRNull() {
                return this.IsNull(this.tableENCABEZADO.REPA_NCORRColumn);
            }
            
            public void SetREPA_NCORRNull() {
                this[this.tableENCABEZADO.REPA_NCORRColumn] = System.Convert.DBNull;
            }
            
            public bool IsREPA_FREPACTACIONNull() {
                return this.IsNull(this.tableENCABEZADO.REPA_FREPACTACIONColumn);
            }
            
            public void SetREPA_FREPACTACIONNull() {
                this[this.tableENCABEZADO.REPA_FREPACTACIONColumn] = System.Convert.DBNull;
            }
            
            public bool IsMREP_TDESCNull() {
                return this.IsNull(this.tableENCABEZADO.MREP_TDESCColumn);
            }
            
            public void SetMREP_TDESCNull() {
                this[this.tableENCABEZADO.MREP_TDESCColumn] = System.Convert.DBNull;
            }
            
            public bool IscorrelativoNull() {
                return this.IsNull(this.tableENCABEZADO.correlativoColumn);
            }
            
            public void SetcorrelativoNull() {
                this[this.tableENCABEZADO.correlativoColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ENCABEZADORowChangeEvent : EventArgs {
            
            private ENCABEZADORow eventRow;
            
            private DataRowAction eventAction;
            
            public ENCABEZADORowChangeEvent(ENCABEZADORow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ENCABEZADORow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
